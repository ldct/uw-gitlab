# Compilation

There are no changes relative to the default gmake/make combination.

# Manual

In addition to the keys specified, the J key causes the avatar to jump.

In addition to the default dragging behaviour, dragging with the right mouse button held down causes the scene to rotate (on an axis perpendicular to the axis along which it rotates when the left mouse button is held down).

# Limitations

Rotations will cause the arrow keys to work in unintuitive ways.

Beginning and ending a drag from different screen areas (e.g. from a slider to outside of the "Debug Window" menu) is not supported. This is due to ImGui reusing the drag variables to implement their slider.

Shadows are not supported.

# Optimizations

Faces that are permanently invisible are not displayed. Hence, the model matrix is not used for the grid. This is because the FPS (on my laptop) is mostly limited by the fragment shader and deleting invisible faces improves performance significantly (at the cost of sending more vertices).

# Acknowledgements

The sphere generation is based on

https://en.wikipedia.org/wiki/Geodesic_polyhedron

The coordinates for a standard tetrahedron is copied from

https://en.wikipedia.org/wiki/Tetrahedron

The marble texture is procedurally generated with the algorithms and code described in the following sources. The base texture is generated by domain wrapping a fractal brownian motion (FBM) function with 3D domain. FBM requires a noise function, which I copied from the following source.

https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83

The FBM implementation is based on the one from the following source

https://thebookofshaders.com/13/

Domain wrapping code, as well as extending FBM to higher codomain dimension, is from the following source

http://www.iquilezles.org/www/articles/warp/warp.htm

The final texture is a 3D texture (i.e. it is defined over R^3). The grid textures are 2D slices of this. This is so that the textures are continuous when traversing cube faces.

The FBM output is a single real number in [0, 1]. We use this to affinely mix two colours. The first colour is provided by a slider, and the second is the complementary colour with a nonlinear transform (squaring) applied. Because the second colour is mixed with a smaller weigth, it forms the "highlights" or "veins" of the marble.

The shading model is based on the diffuse shading from the A3 starter code, with a linear falloff added so that changing the illumination source does not perceptually change the total light intensity. The specular term is deleted and the ambient term is combined affinely here.

# Machine used

36
